"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReturnQueryFromVNPayDTO = void 0;
const class_validator_1 = require("class-validator");
class ReturnQueryFromVNPayDTO {
    constructor(data) {
        this.vnp_TmnCode = data.vnp_TmnCode;
        this.vnp_Amount = Number(data.vnp_Amount);
        this.vnp_BankCode = data.vnp_BankCode;
        this.vnp_BankTranNo = data === null || data === void 0 ? void 0 : data.vnp_BankTranNo;
        this.vnp_CardType = data === null || data === void 0 ? void 0 : data.vnp_CardType;
        this.vnp_PayDate = data === null || data === void 0 ? void 0 : data.vnp_PayDate;
        this.vnp_OrderInfo = data.vnp_OrderInfo;
        this.vnp_TransactionNo = Number(data.vnp_TransactionNo);
        this.vnp_ResponseCode = data.vnp_ResponseCode;
        this.vnp_TransactionStatus = data.vnp_TransactionStatus;
        this.vnp_TxnRef = data.vnp_TxnRef;
        this.vnp_SecureHashType = data === null || data === void 0 ? void 0 : data.vnp_SecureHashType;
        this.vnp_SecureHash = data.vnp_SecureHash;
    }
}
exports.ReturnQueryFromVNPayDTO = ReturnQueryFromVNPayDTO;
__decorate([
    (0, class_validator_1.IsNotEmpty)(),
    (0, class_validator_1.IsAlphanumeric)(),
    (0, class_validator_1.Length)(8, 8)
], ReturnQueryFromVNPayDTO.prototype, "vnp_TmnCode", void 0);
__decorate([
    (0, class_validator_1.IsNotEmpty)(),
    (0, class_validator_1.IsNumber)(),
    (0, class_validator_1.Min)(1),
    (0, class_validator_1.Max)(999999999999)
], ReturnQueryFromVNPayDTO.prototype, "vnp_Amount", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.Length)(3, 20)
], ReturnQueryFromVNPayDTO.prototype, "vnp_BankCode", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.Length)(1, 255)
], ReturnQueryFromVNPayDTO.prototype, "vnp_BankTranNo", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.Length)(2, 20)
], ReturnQueryFromVNPayDTO.prototype, "vnp_CardType", void 0);
__decorate([
    (0, class_validator_1.IsOptional)()
], ReturnQueryFromVNPayDTO.prototype, "vnp_PayDate", void 0);
__decorate([
    (0, class_validator_1.IsNotEmpty)(),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.Length)(1, 255)
], ReturnQueryFromVNPayDTO.prototype, "vnp_OrderInfo", void 0);
__decorate([
    (0, class_validator_1.IsNotEmpty)(),
    (0, class_validator_1.IsNumber)()
], ReturnQueryFromVNPayDTO.prototype, "vnp_TransactionNo", void 0);
__decorate([
    (0, class_validator_1.IsNotEmpty)()
], ReturnQueryFromVNPayDTO.prototype, "vnp_ResponseCode", void 0);
__decorate([
    (0, class_validator_1.IsNotEmpty)()
], ReturnQueryFromVNPayDTO.prototype, "vnp_TransactionStatus", void 0);
__decorate([
    (0, class_validator_1.IsNotEmpty)(),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.Length)(1, 100)
], ReturnQueryFromVNPayDTO.prototype, "vnp_TxnRef", void 0);
__decorate([
    (0, class_validator_1.IsString)()
], ReturnQueryFromVNPayDTO.prototype, "vnp_SecureHashType", void 0);
__decorate([
    (0, class_validator_1.IsNotEmpty)(),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.Length)(32, 256)
], ReturnQueryFromVNPayDTO.prototype, "vnp_SecureHash", void 0);
