"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const ins = new __1.VNPay({
            tmnCode: '2QXUI4B4',
            secureSecret: 'hihi',
            returnUrl: 'https://sandbox.vnpayment.vn/tryitnow/Home/ReturnResult',
        });
        const url = yield ins.buildPaymentUrl({
            vnp_Amount: 10000,
            vnp_IpAddr: '1.1.1.1',
            vnp_TxnRef: '123456',
            vnp_OrderInfo: '123456',
        });
        console.log(url);
        const query = {
            vnp_Amount: '10000',
            vnp_BankCode: 'NCB',
            vnp_BankTranNo: '123456',
            vnp_CardType: 'ATM',
            vnp_OrderInfo: '123456',
            vnp_PayDate: '20220101120000',
            vnp_ResponseCode: '00',
            vnp_TmnCode: '2QXUI4B4',
            vnp_TransactionNo: '123456',
            vnp_TxnRef: '123456',
            vnp_SecureHash: 'hash',
        };
        const verify = yield ins.verifyReturnUrl(query);
        console.log(verify);
    });
}
main();
