import { ConfigVnpayDTO, BuildPaymentUrlDTO } from './dtos';
import { VnpLocale } from './enums';
import { ReturnQueryFromVNPayDTO } from './dtos/return-query-from-vnpay.dto';
import { VerifyReturnUrlDTO } from './dtos/verify-return-url.dto';
/**
 * VNPay class to support VNPay payment
 * @vi_vn Lớp hỗ trợ thanh toán qua VNPay
 *
 * @example
 * import { VNPay } from 'vnpay';
 *
 * const vnpay = new VNPay({
 *     paymentGateway: 'https://sandbox.vnpayment.vn/paymentv2/vpcpay.html',
 *     tmnCode: 'TMNCODE',
 *     secureSecret: 'SERCRET',
 * });
 *
 * // or setup with async/await
 * const vnpayAsync = await VNPay.setup({
 *     paymentGateway: 'https://sandbox.vnpayment.vn/paymentv2/vpcpay.html',
 *     tmnCode: 'TMNCODE',
 *     secureSecret: 'SERCRET',
 * });
 *
 * const tnx = '12345678';
 * const urlString = await vnpay.buildPaymentUrl({
 *     vnp_Amount: 100000,
 *      vnp_IpAddr: '192.168.0.1',
 *      vnp_ReturnUrl: 'http://localhost:8888/order/vnpay_return',
 *      vnp_TxnRef: tnx,
 *      vnp_OrderInfo: `Thanh toan cho ma GD: ${tnx}`,
 * }),
 */
export declare class VNPay {
    private globalConfig;
    private CRYPTO_ALGORITHM;
    private CRYPTO_ENCODING;
    private vnp_Version;
    private vnp_Command;
    private vnp_CurrCode;
    private vnp_Locale;
    private vnp_OrderType;
    constructor({ paymentGateway, ...init }: ConfigVnpayDTO);
    /**
     * Setup the VNPay config
     * @vi_vn Phương thức thiết lập cấu hình cho VNPay
     *
     * @param {ConfigVnpayDTO} init  - The config to setup
     * @returns {VNPay} The VNPay instance
     */
    static setup(init: ConfigVnpayDTO): Promise<VNPay>;
    /**
     * Default config for VNPay
     * @vi_vn Cấu hình mặc định cho VNPay
     */
    get configDefault(): Partial<{
        vnp_Version: string;
        vnp_Command: string;
        vnp_CurrCode: string;
        vnp_Locale: VnpLocale;
        vnp_OrderType: string;
    }>;
    /**
     * Set the default config for VNPay
     * @vi_vn Phương thức thiết lập cấu hình mặc định cho VNPay
     */
    set configDefault(config: Partial<{
        vnp_Version: string;
        vnp_Command: string;
        vnp_CurrCode: string;
        vnp_Locale: VnpLocale;
        vnp_OrderType: string;
    }>);
    private validateGlobalConfig;
    /**
     * Build the payment url
     * @vi_vn Phương thức xây dựng, tạo thành url thanh toán của VNPay
     *
     * @param {BuildPaymentUrlDTO} payload - Payload that contains the information to build the payment url
     * @returns {string} The payment url string
     */
    buildPaymentUrl(payload: BuildPaymentUrlDTO): Promise<string>;
    /**
     * Method to verify the return url from VNPay
     * @vi_vn Phương thức xác thực tính đúng đắn của các tham số trả về từ VNPay
     * @param {ReturnQueryFromVNPayDTO} query - The object of data return from VNPay
     * @returns {Promise<VerifyReturnUrlDTO>} The return object
     */
    verifyReturnUrl(query: ReturnQueryFromVNPayDTO): Promise<VerifyReturnUrlDTO>;
    /**
     *
     * @param responseCode The response code from VNPay
     * @param locale The locale to get the response text
     * @returns The response text
     */
    static getResponseByStatusCode(responseCode: string, locale?: VnpLocale): string;
}
